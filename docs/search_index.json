[
["index.html", "Analysis of financial data with R", " Analysis of financial data with R François de Ryckel fderyckel.github.io 2019-05-15 "],
["01-introduction.html", "Chapter 1 Prerequisites 1.1 Pre-requisite and conventions", " Chapter 1 Prerequisites Welcome to my reference book in leveraging R, the tidyverse and other R tools for analysing financial data. This is still a huge mess as I am trying to gain more skills in quantitative trading. So this book is a compilation of the techniques I’ve learned along the way. Most of what I have learned is through blog posts, stack overflow questions, etc. I am not taking any credit for all the great ideas, examples, graphs, etc. found in this web book. Most of what you’ll find here has been directly taken from blogs, Kaggle kernels, etc. I have tried as much as I could remember to reference the origins of the ideas. I do take responsibility for all mistakes, typos, unclear explanations, poor labeling / presentation of graphs. If you find anything that require improvement, I would be grateful if you would let me know: f.deryckel@gmail.com or even better post an issue on github here. 1.1 Pre-requisite and conventions Here are the libraries, we are using throughout the book library(bdscale) # To get rid of weekend and holidays on candlestick chart library(caret) # For data spliting, cross validation and unified interface to run algo library(gridExtra) # to stack the charts (like on candlestick chart) library(lubridate) # To deal with dates library(RollingWindow) # For fast rolling functions (like max, std, etc.) library(tidyverse) # For pretty much everything related to data wrangling library(scales) # again to deal with dates but on the x-axis library(urca) "],
["02-getting_data.html", "Chapter 2 Getting Data 2.1 Introduction 2.2 Getting historical EOD data using quantmod 2.3 Getting other data", " Chapter 2 Getting Data Overview on getting financial data through the web. We are especially interested at the moment in market data. 2.1 Introduction There are several tools to get financial data using R. Use existing R packages such as quantmod to download data from various data provider (!Yahoo, AlphaVantage, Tiingo, etc.) Use some webscrapping techniques Function to download data from the alphavantage API - only 5 download per minutes allowed. This function should be saved for later use. library(tidyverse) library(lubridate) #to deal with dates library(rvest) # to webscrap financial data library(gridExtra) # to stack the charts library(scales) # again to deal with dates but on the x-axis library(bdscale) # to remove weekends and holidays # setting up the path within the project for easier portability of code thePath &lt;- here::here() 2.2 Getting historical EOD data using quantmod Because we will constantly retrieve eod (end of day) financial data, it will be easier to create a function that we’ll reuse whenever necessary. As of now, the Alphavantage api is one of the easiest, reliable api one can use. I have masked my key but is quite easy to get your own. I want a function that donwload eod data and save them as a .csv file in a separate folder for further use down the road. # we make it a function that take as input a vector of tickers get_eod_data &lt;- function(ticker_vector){ tickers &lt;- ticker_vector for (i in 1:length(tickers)){ print(tickers[i]) data = quantmod::getSymbols(Symbols = tickers[i], src = &quot;av&quot;, api.key = &quot;W7SXXXXXXXXXXX2K&quot;, output.size = &quot;full&quot;, adjusted = TRUE, auto.assign = FALSE, index.class=&quot;POSIXct&quot;) colnames(data) = c(&quot;Open&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;, &quot;Volume&quot;, &quot;Adjusted&quot;) zoo::write.zoo(data, paste0(thePath, &quot;/stockdata_av/&quot;, tickers[i], &quot;.csv&quot;), sep = &quot;,&quot;, row.names = FALSE) # I am adding this because, we are limited to 5 download per minutes with the free key. Sys.sleep(14) }} Here are two ways one can use the newly created function. ## Just get data using this function from now on ;-) get_eod_data(c(&quot;GDX&quot;, &quot;MAG&quot;)) tickers &lt;- c(&quot;XOM&quot;, &quot;ABX&quot;, &quot;SLB&quot;, &quot;CANE&quot;, &quot;NIB&quot;, &quot;GDXJ&quot;) get_eod_data(tickers) 2.3 Getting other data I want to get the market cap from the yahoo API. The yahoo finance has had its fair share of problem over the year when it comes to get eod prices, but it works well enough for other financial data such as market cap. Again, create a function is the best way forward for further usability. library(rvest) get_market_cap &lt;- function(symbol){ # We get the Yahoo! stats print(symbol) url &lt;- paste0(&#39;https://finance.yahoo.com/quote/&#39;,symbol, &quot;?p=&quot;, symbol) yo &lt;- url %&gt;% read_html() %&gt;% html_table() # Here a few trials and errors are necessary to get the right piece of data (in this case market cap) return(yo[[2]][1, 2]) } df &lt;- tibble(ticker = c(&quot;XOM&quot;, &quot;SLB&quot;, &quot;HAL&quot;, &quot;RIG&quot;, &quot;WFT&quot;)) %&gt;% mutate(market_cap = map_chr(ticker, function(.x) get_market_cap(.x))) [1] &quot;XOM&quot; [1] &quot;SLB&quot; [1] &quot;HAL&quot; [1] &quot;RIG&quot; [1] &quot;WFT&quot; ticker market_cap XOM 320.759B SLB 54.02B HAL 22.225B RIG 4.52B WFT 366.817M "],
["03-visualizing_data.html", "Chapter 3 Visualizing data", " Chapter 3 Visualizing data 3.0.1 Plotting candlestick chart with technicals The function create_candlestick() takes 3 arguments: a ticker, a start date (by default, it is a year ago), an end date (by default, it is today). We got the main part of the function from the tidyquant package. geom_candlestick &lt;- function(mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, na.rm = TRUE, show.legend = NA, inherit.aes = TRUE, colour_up = &quot;gray30&quot;, colour_down = &quot;gray30&quot;, fill_up = &quot;green3&quot;, fill_down = &quot;red&quot;, ...) { linerange &lt;- ggplot2::layer( stat = StatLinerangeBC, geom = GeomLinerangeBC, data = data, mapping = mapping, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down, colour_up = colour_up, colour_down = colour_down, ...) ) rect &lt;- ggplot2::layer( stat = StatRectCS, geom = GeomRectCS, data = data, mapping = mapping, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(na.rm = na.rm, fill_up = fill_up, fill_down = fill_down, colour_up = colour_up, colour_down = colour_down, ...) ) list(linerange, rect) } StatLinerangeBC &lt;- ggplot2::ggproto(&quot;StatLinerangeBC&quot;, Stat, required_aes = c(&quot;x&quot;, &quot;open&quot;, &quot;high&quot;, &quot;low&quot;, &quot;close&quot;), compute_group = function(data, scales, params, fill_up, fill_down, colour_up, colour_down) { data &lt;- data %&gt;% dplyr::mutate(colour = ifelse(open &lt; close, colour_up, colour_down)) tibble::tibble(x = data$x, ymin = data$low, ymax = data$high, colour = data$colour) }) StatRectCS &lt;- ggplot2::ggproto(&quot;StatRectCS&quot;, Stat, required_aes = c(&quot;x&quot;, &quot;open&quot;, &quot;high&quot;, &quot;low&quot;, &quot;close&quot;), compute_group = function(data, scales, params, fill_up, fill_down, colour_up, colour_down) { data &lt;- data %&gt;% dplyr::mutate(fill = ifelse(open &lt; close, fill_up, fill_down), ymin = ifelse(open &lt; close, open, close), ymax = ifelse(open &lt; close, close, open)) tibble::tibble(xmin = data$x - 0.45, xmax = data$x + 0.45, ymin = data$ymin, ymax = data$ymax, fill = data$fill) }) GeomRectCS &lt;- ggproto(&quot;GeomRectCS&quot;, GeomRect, default_aes = aes(colour = NA, size = 0.5, linetype = 1, alpha = NA)) GeomLinerangeBC &lt;- ggproto(&quot;GeomLinerangeBC&quot;, GeomLinerange, default_aes = aes(size = 0.5, linetype = 1, alpha = NA)) create_candlestick &lt;- function(tickerss, start_d = today()-360, end_d = today()) { df &lt;- read_csv(paste0(thePath, &quot;/stockdata_av/&quot;, tickerss, &quot;.csv&quot;)) %&gt;% select(Index, Open, High, Low, Close, Volume) df$Index &lt;- ymd(df$Index) #for the ADX yo &lt;- TTR::ADX(df[,3:5], n = 13) %&gt;% as_tibble() %&gt;% select(-DX) # Adding the other variables such a moving averages and relative strength index df3 &lt;- df %&gt;% mutate(sma200 = TTR:: SMA(Close, 200), sma50 = TTR::SMA(Close, 50), ema9 = TTR::EMA(Close, 9), rsi14 = TTR::RSI(Close, 14), rsi5 = TTR::RSI(Close, 5), ppo_line = (TTR::EMA(Close, n = 12) - TTR::EMA(Close, n = 26)) / TTR::EMA(Close, n = 26) * 100, ppo_signal = TTR::EMA(ppo_line, n = 9)) df2 &lt;- bind_cols(df3, yo) %&gt;% filter(Index &gt;= start_d &amp; Index &lt;= end_d) # The main chart with the moving averages p1 &lt;- ggplot(df2, aes(x=Index, y = Close)) + geom_candlestick(aes(open = Open, high = High, low = Low, close = Close)) + geom_line(aes(y = ema9), color = &quot;red&quot;, size = 0.2) + geom_line(aes(y = sma200), color = &quot;darkorchid1&quot;, size = 0.3) + # because I need to remember which chart is it (to which stock it belongs) annotate(&quot;text&quot;, x = df2$Index[10], y = 1.1 * df2$Close[10], label = tickerss, color = &quot;white&quot;) + geom_line(aes(y = sma50), color = &quot;Turquoise 1&quot;, size = 0.3) + scale_x_bd(business.dates=df2$Index, max.major.breaks = 20, labels=date_format(&quot;%b &#39;%y&quot;), expand = c(0,0.3)) + scale_y_continuous(sec.axis = sec_axis(~.*1)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.text.y = element_text(angle = 90), # This is to shrink the padding at the 4 side of the graph plot.margin = margin(0.2, 0.2, 0.1, 0.4, &quot;cm&quot;), panel.background = element_rect(fill = &quot;black&quot;), plot.background = element_rect(fill = &quot;Gray 65&quot;), panel.grid.major.x = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.2), panel.grid.major.y = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.2), panel.grid.minor.y = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.15), panel.grid.minor.x = element_blank()) # graphing of the ppo part. p2 &lt;- ggplot(df2, aes(x = Index)) + geom_line(aes(y = ppo_signal, color = &quot;darkorchid1&quot;), size = 0.4) + geom_line(aes(y = ppo_line, color = &quot;Royal Blue 1&quot;), size = 0.5) + geom_hline(yintercept = 0, color = &quot;red&quot;, linetype = &quot;dashed&quot;, size = 0.3) + scale_y_continuous(sec.axis = sec_axis(~.*1)) + scale_x_bd(business.dates=df2$Index, max.major.breaks = 20, labels=date_format(&quot;%b &#39;%y&quot;), expand = c(0,0.1)) + ylab(&quot;PPO&quot;) + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.text.x = element_blank(), axis.text.y = element_text(angle = 90), plot.margin = margin(0, 0.2, 0.1, 0.4, &quot;cm&quot;), panel.background = element_rect(fill = &quot;black&quot;), plot.background = element_rect(fill = &quot;Gray 65&quot;), panel.grid.major.x = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.2), panel.grid.major.y = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.1), panel.grid.minor = element_blank()) p4 &lt;- ggplot(df2, aes(x = Index)) + geom_line(aes(y = DIp), color = &quot;Turquoise 1&quot;, size = 0.2) + geom_line(aes(y = DIn), color = &quot;red&quot;, size = 0.2) + geom_line(aes(y = ADX), color = &quot;Gray 70&quot;, size = 0.3) + scale_y_continuous(sec.axis = sec_axis(~.*1)) + scale_x_bd(business.dates=df2$Index, max.major.breaks = 20, labels=date_format(&quot;%b &#39;%y&quot;), expand = c(0,0.1)) + ylab(&quot;ADX&quot;) + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.text.x = element_blank(), axis.text.y = element_text(angle = 90), plot.margin = margin(0, 0.2, 0.1, 0.4, &quot;cm&quot;), panel.background = element_rect(fill = &quot;black&quot;), plot.background = element_rect(fill = &quot;Gray 65&quot;), panel.grid.major.x = element_line(color = &quot;white&quot;, linetype = &quot;dashed&quot;, size = 0.1), panel.grid.major.y = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.1), panel.grid.minor = element_blank()) p3 &lt;- ggplot(df2, aes(x = Index)) + geom_line(aes(y = rsi14, color = &quot;Dark Orange&quot;)) + geom_line(aes(y = rsi5, color = &quot;Gray 80&quot;), linetype = &quot;dotted&quot;, size = 0.4) + scale_x_bd(business.dates=df2$Index, max.major.breaks = 20, labels=date_format(&quot;%b &#39;%y&quot;), expand = c(0,0.5)) + scale_y_continuous(sec.axis = sec_axis(~.)) + ylab(&quot;RSI&quot;) + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.text.y = element_text(angle = 90), axis.text.x = element_text(angle = 30, vjust = 0.8), plot.margin = margin(0.0, 0.2, 0.2, 0.4, &quot;cm&quot;), panel.background = element_rect(fill = &quot;black&quot;), plot.background = element_rect(fill = &quot;Gray 65&quot;), panel.grid.major.x = element_line(color = &quot;white&quot;, linetype = &quot;dashed&quot;, size = 0.2), panel.grid.major.y = element_line(color = &quot;white&quot;, linetype = &quot;dotted&quot;, size = 0.2), panel.grid.minor = element_blank()) grid.arrange(p1, p2, p4, p3, ncol = 1, heights = c(2.5, 1, 1, 1)) } Let’s try it. ticker &lt;- &quot;PAAS&quot; #get_eod_data(ticker) create_candlestick(ticker, &quot;2017-06-01&quot;, &quot;2019-01-20&quot;) 3.0.2 Plotting cumulative return This graph is useful when comparing the returns of several assets together. ticker1 &lt;- &quot;SLB&quot; ticker2 &lt;- &quot;HAL&quot; starting_time &lt;- &quot;2018-01-01&quot; #get_eod_data(c(ticker1, ticker2)) df1 &lt;- read_csv(paste0(thePath, &quot;/stockdata_av/&quot;, ticker1, &quot;.csv&quot;)) %&gt;% select(Index, Adjusted) %&gt;% rename(SLB = Adjusted) df2 &lt;- read_csv(paste0(thePath, &quot;/stockdata_av/&quot;, ticker2, &quot;.csv&quot;)) %&gt;% select(Index, Adjusted) %&gt;% rename(HAL = Adjusted) df &lt;- left_join(df1, df2, by=&quot;Index&quot;) %&gt;% filter(Index &gt;= starting_time) %&gt;% mutate(slb_ret = SLB / first(SLB), hal_ret = HAL / first(HAL)) %&gt;% na.omit() %&gt;% select(Index, slb_ret, hal_ret) %&gt;% gather(key = &quot;ticker&quot;, value = &quot;return&quot;, -Index) ggplot(df, aes(x = Index, y = return, col = ticker)) + geom_line() "],
["05-timeseries.html", "Chapter 4 Time Series 4.1 Transforming data into time series", " Chapter 4 Time Series library(tidyverse) Time series in general, including those outside of the financial world, often contain the following features: Trends - A trend is a consistent directional movement in a time series. These trends will either be deterministic or stochastic. The former allows us to provide an underlying rationale for the trend, while the latter is a random feature of a series that we will be unlikely to explain. Trends often appear in financial series, particularly commodities prices, and many Commodity Trading Advisor (CTA) funds use sophisticated trend identification models in their trading algorithms. Seasonal Variation - Many time series contain seasonal variation. This is particularly true in series representing business sales or climate levels. In quantitative finance we often see seasonal variation in commodities, particularly those related to growing seasons or annual temperature variation (such as natural gas). Serial Dependence - One of the most important characteristics of time series, particularly financial series, is that of serial correlation. This occurs when time series observations that are close together in time tend to be correlated. Volatility clustering is one aspect of serial correlation that is particularly important in quantitative trading. One important aspect in dealing with financial time series is the one of serial correlation (also called autocorrelation) 4.1 Transforming data into time series Let’s load any stock data ticker &lt;- &quot;COP&quot; #get_eod_data(ticker) df &lt;- read_csv(paste0(thePath, &quot;/StockData_av/&quot;, ticker, &quot;.csv&quot;)) glimpse(df) Observations: 5,979 Variables: 7 $ Index &lt;date&gt; 1995-01-03, 1995-01-04, 1995-01-05, 1995-01-06, 1995-01-09, 1995-01-10, 1995-01-11, 1995-01-12, 1995-01-13, 1995-01-16, 1995-01-17, 1995-01-18, 1995-01-19, 1995-01-20, 1995-01-23, 1995-01-24, 1995-01… $ Open &lt;dbl&gt; 32.75, 32.75, 32.50, 32.25, 31.87, 31.12, 30.87, 30.37, 30.25, 30.62, 30.62, 31.00, 31.50, 31.75, 31.75, 32.62, 32.00, 32.37, 32.75, 32.37, 31.75, 31.75, 31.12, 31.50, 32.00, 32.37, 31.75, 32.62, 32.6… $ High &lt;dbl&gt; 33.12, 32.75, 32.50, 32.37, 31.87, 31.50, 31.00, 30.37, 30.75, 30.75, 31.37, 32.00, 31.87, 32.25, 32.75, 32.75, 32.50, 32.62, 32.75, 32.37, 31.87, 32.00, 31.50, 31.62, 32.25, 32.50, 32.75, 32.87, 32.6… $ Low &lt;dbl&gt; 32.62, 32.12, 32.12, 32.00, 31.00, 30.87, 30.00, 29.87, 30.00, 30.37, 30.50, 31.00, 31.50, 31.62, 31.75, 32.00, 31.87, 32.12, 32.37, 31.50, 31.37, 31.25, 31.00, 31.25, 32.00, 31.75, 31.75, 32.50, 32.1… $ Close &lt;dbl&gt; 32.62, 32.50, 32.25, 32.12, 31.12, 31.12, 30.50, 30.12, 30.62, 30.75, 31.12, 31.87, 31.75, 32.00, 32.75, 32.00, 32.37, 32.62, 32.50, 31.75, 31.87, 31.25, 31.37, 31.62, 32.25, 32.00, 32.50, 32.75, 32.1… $ Volume &lt;dbl&gt; 482700, 739150, 604700, 767750, 646550, 583200, 783650, 583600, 1065800, 362300, 913400, 1194100, 703750, 553300, 503050, 445050, 680950, 446900, 463700, 445350, 343000, 582800, 363600, 424850, 680650… $ Adjusted &lt;dbl&gt; 5.9212, 5.8994, 5.8540, 5.8304, 5.6489, 5.6489, 5.5364, 5.4674, 5.5582, 5.5817, 5.6489, 5.7851, 5.7633, 5.8086, 5.9448, 5.8086, 5.8758, 5.9212, 5.8994, 5.8141, 5.8361, 5.7225, 5.7445, 5.7903, 5.9057, … df_ts &lt;- xts::xts(df[,-1], order.by = df$Index) head(df_ts) Open High Low Close Volume Adjusted 1995-01-03 32.75 33.12 32.62 32.62 482700 5.9212 1995-01-04 32.75 32.75 32.12 32.50 739150 5.8994 1995-01-05 32.50 32.50 32.12 32.25 604700 5.8540 1995-01-06 32.25 32.37 32.00 32.12 767750 5.8304 1995-01-09 31.87 31.87 31.00 31.12 646550 5.6489 1995-01-10 31.12 31.50 30.87 31.12 583200 5.6489 "]
]
